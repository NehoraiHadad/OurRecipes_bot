name: CI/CD pipeline

on:
  push:
    branches: [ master ] 

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2 

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1.6.2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: our_recipes_bot
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@master
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: our_recipes_bot
        IMAGE_TAG: latest
        TELEGRAM_API_TOKEN: ${{ secrets.TELEGRAM_API_TOKEN }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        script: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          sudo docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          CONTAINER_ID=$(sudo docker ps -q)
          if [ ! -z "$CONTAINER_ID" ]; then
            sudo docker stop $CONTAINER_ID
          fi          
          sudo docker run --rm -e TELEGRAM_API_TOKEN=${{ env.TELEGRAM_API_TOKEN }} -v ~/.aws:/root/.aws -p 80:8080 ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    - name: Delete old images and containers
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        script: |
          # Delete all stopped containers
          docker container prune -f

          # Delete all images except the one tagged as latest
          docker images | grep -v 'latest' | awk '{ print $3 }' | xargs docker rmi -f

    - name: Delete old images from ECR
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Get a sorted list of images based on push time
        IMAGES=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --query 'sort_by(imageDetails,&imagePushedAt)[*].imageTags[0]' --output json)

        # Get the number of images
        COUNT=$(echo $IMAGES | jq '. | length')

        # If there are more than 2 images
        if [ $COUNT -gt 2 ]; then
          # Get a list of images to delete (all images except the last two)
          DELETE_IMAGES=$(echo $IMAGES | jq '. | .[0: -2]')

          # Loop through the images to delete
          for IMAGE in $(echo "${DELETE_IMAGES}" | jq -r '.[]'); do
            # Delete the image
            aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE
          done
        fi
